[gd_scene load_steps=5 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "tool
extends Node2D

export var texture: Texture setget set_texture


func _draw() -> void:
	draw_texture(texture, Vector2.ZERO)


func set_texture(value: Texture) -> void:
	texture = value
	update()
	# Atualiza a representação visual do nó.
"

[sub_resource type="GDScript" id=2]
resource_local_to_scene = true
script/source = "tool
extends Node2D

const POINTS: int = 32 # Level of Detail (LOD) Fixo
export var fill: bool setget set_fill
export var radius: float = 64.0 setget set_radius
export (float, -360.0, 360.0) var angle: float = 45.0 setget set_angle
export var color := Color.white setget set_color


func _draw() -> void:
	
	if fill:
		draw_circle_arc_poly(Vector2.ZERO, radius, 0.0, deg2rad(angle), color)
	else:
		draw_circle_arc(Vector2.ZERO, radius, 0.0, deg2rad(angle), color)


func draw_circle_arc(center: Vector2, arc_radius: float, angle_from: float, angle_to: float,
		arc_color: Color) -> void:
	var points_arc := PoolVector2Array()
	
	for i in POINTS + 1:
		var angle_point: float = angle_from + i * (angle_to - angle_from) / POINTS - PI / 2.0
		points_arc.push_back(center + Vector2(cos(angle_point), sin(angle_point)) * arc_radius)
	
	for index_point in POINTS:
		draw_line(points_arc[index_point], points_arc[index_point + 1], color)


func draw_circle_arc_poly(center: Vector2, arc_radius: float, angle_from: float, angle_to: float,
		arc_color: Color) -> void:
	var points_arc := PoolVector2Array([center])
	var colors := PoolColorArray([color])
	
	for i in POINTS + 1:
		var angle_point: float = angle_from + i * (angle_to - angle_from) / POINTS - PI / 2.0
		points_arc.push_back(center + Vector2(cos(angle_point), sin(angle_point)) * radius)
	
	draw_polygon(points_arc, colors)


func set_radius(value: float) -> void:
	radius = value
	update()


func set_fill(value: bool) -> void:
	fill = value
	update()


func set_angle(value: float) -> void:
	angle = value
	update()


func set_color(value: Color) -> void:
	color = value
	update()
"

[sub_resource type="GDScript" id=3]
script/source = "tool
extends Node2D

# TODO -> Verificar a sobrecarga de CanvasItems com o método `_draw()`

const POINTS: int = 32 # Level of Detail (LOD) Fixo
const G360: float = PI * 2.0
export var fill: bool setget set_fill
export var radius: float = 64.0 setget set_radius
#export (float, -360.0, 360.0) var angle: float = 45.0 setget set_angle
export var color := Color.white setget set_color


var rotation_angle: float = deg2rad(50)
var from: float = deg2rad(75.0)
var to: float = deg2rad(195.0)


func _draw() -> void:
	
	if fill:
#		draw_circle_arc_poly(Vector2.ZERO, radius, 0.0, deg2rad(angle), color)
		draw_circle_arc_poly(Vector2.ZERO, radius, from, to, color)
	else:
#		draw_circle_arc(Vector2.ZERO, radius, 0.0, deg2rad(angle), color)
		draw_circle_arc(Vector2.ZERO, radius, from, to, color)


func _process(delta: float) -> void:
	from += rotation_angle * delta
	to += rotation_angle * delta
	
	if from > G360 and to > G360:
		from = wrapf(from, -G360, G360)
		to = wrapf(to, -G360, G360)
	update()


func draw_circle_arc(center: Vector2, arc_radius: float, angle_from: float, angle_to: float,
		arc_color: Color) -> void:
	var points_arc := PoolVector2Array()
	
	for i in POINTS + 1:
		var angle_point: float = angle_from + i * (angle_to - angle_from) / POINTS - PI / 2.0
		points_arc.push_back(center + Vector2(cos(angle_point), sin(angle_point)) * arc_radius)
	
	for index_point in POINTS:
		draw_line(points_arc[index_point], points_arc[index_point + 1], color)


func draw_circle_arc_poly(center: Vector2, arc_radius: float, angle_from: float, angle_to: float,
		arc_color: Color) -> void:
	var points_arc := PoolVector2Array([center])
	var colors := PoolColorArray([color])
	
	for i in POINTS + 1:
		var angle_point: float = angle_from + i * (angle_to - angle_from) / POINTS - PI / 2.0
		points_arc.push_back(center + Vector2(cos(angle_point), sin(angle_point)) * radius)
	
	draw_polygon(points_arc, colors)


func set_radius(value: float) -> void:
	radius = value
	update()


func set_fill(value: bool) -> void:
	fill = value
	update()


#func set_angle(value: float) -> void:
#	angle = value
#	update()


func set_color(value: Color) -> void:
	color = value
	update()
"

[node name="CustomDrawing" type="Node2D"]

[node name="CustomSprite" type="Node2D" parent="."]
script = SubResource( 1 )
texture = ExtResource( 1 )

[node name="Arc" type="Node2D" parent="."]
script = SubResource( 2 )

[node name="MovingArc" type="Node2D" parent="."]
script = SubResource( 3 )
